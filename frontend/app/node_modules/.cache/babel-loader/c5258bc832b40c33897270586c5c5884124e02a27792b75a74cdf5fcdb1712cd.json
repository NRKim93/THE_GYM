{"ast":null,"code":"var _jsxFileName = \"C:\\\\NRKIM_WORKSPACE\\\\THE_GYM\\\\frontend\\\\app\\\\src\\\\components\\\\MapComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapComponent = () => {\n  _s();\n  const [map, setMap] = useState(null);\n  const [gyms, setGyms] = useState([]); // ✅ 헬스장 목록 상태 추가\n  const [userLocation, setUserLocation] = useState(null); // ✅ 현재 위치 상태 추가\n\n  useEffect(() => {\n    const initMap = (lat, lng) => {\n      const {\n        naver\n      } = window;\n      if (!naver) return;\n      const mapInstance = new naver.maps.Map('map', {\n        center: new naver.maps.LatLng(lat, lng),\n        zoom: 15\n      });\n\n      // ✅ 내 위치 마커 추가\n      new naver.maps.Marker({\n        position: new naver.maps.LatLng(lat, lng),\n        map: mapInstance,\n        title: \"내 위치\",\n        icon: {\n          content: '<div style=\"color:red; font-weight:bold;\">📍</div>',\n          size: new naver.maps.Size(20, 20),\n          anchor: new naver.maps.Point(10, 10)\n        }\n      });\n      setMap(mapInstance);\n    };\n    const getCurrentPosition = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const userLat = position.coords.latitude;\n          const userLng = position.coords.longitude;\n          console.log(\"📍 현재 위치:\", userLat, userLng); // ✅ 디버깅용 로그\n\n          setUserLocation({\n            lat: userLat,\n            lng: userLng\n          });\n          initMap(userLat, userLng);\n          fetchGyms(userLat, userLng); // ✅ 위치 정보 가져온 후 헬스장 검색\n        }, error => {\n          console.error(\"❌ Geolocation Error:\", error);\n          initMap(37.5665, 126.9780);\n        }, {\n          enableHighAccuracy: true,\n          timeout: 10000,\n          maximumAge: 0\n        });\n      } else {\n        console.error(\"Geolocation is not supported by this browser.\");\n        initMap(37.5665, 126.9780);\n      }\n    };\n\n    // ✅ 네이버 지도 스크립트 로드\n    const script = document.createElement('script');\n    script.src = `https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=${process.env.REACT_APP_NAVER_MAP_CLIENT_ID}`;\n    script.async = true;\n    script.onload = getCurrentPosition;\n    document.head.appendChild(script);\n  }, []);\n\n  // ✅ 헬스장 목록 가져오기\n  const fetchGyms = async (lat, lng) => {\n    try {\n      console.log(\"🔍 헬스장 검색 요청:\", lat, lng); // ✅ 요청 전 위치 확인\n      const response = await axios.get(\"http://localhost:8080/api/v1/places\", {\n        params: {\n          lat,\n          lng\n        }\n      });\n      console.log(\"✅ 헬스장 검색 결과:\", response.data.items);\n      setGyms(response.data.items);\n    } catch (error) {\n      console.error(\"API 호출 오류:\", error);\n    }\n  };\n\n  // ✅ 지도 위에 마커 추가\n  useEffect(() => {\n    if (!map || gyms.length === 0) return;\n    gyms.forEach(gym => {\n      new naver.maps.Marker({\n        position: new naver.maps.LatLng(gym.mapy, gym.mapx),\n        // 네이버 API는 위도/경도 순서가 반대\n        map: map,\n        title: gym.title,\n        icon: {\n          content: `<div style=\"color:blue; font-weight:bold;\">🏋️‍♂️</div>`,\n          size: new naver.maps.Size(20, 20),\n          anchor: new naver.maps.Point(10, 10)\n        }\n      });\n    });\n  }, [map, gyms]); // ✅ `gyms` 변경될 때 마커 추가\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        width: '100%',\n        height: '500px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uADFC\\uCC98 \\uD5EC\\uC2A4\\uC7A5 \\uBAA9\\uB85D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: gyms.map((gym, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: gym.title\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n};\n_s(MapComponent, \"/Kv8A+9OjjwpnwtPC5WWstZeS2A=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","MapComponent","_s","map","setMap","gyms","setGyms","userLocation","setUserLocation","initMap","lat","lng","naver","window","mapInstance","maps","Map","center","LatLng","zoom","Marker","position","title","icon","content","size","Size","anchor","Point","getCurrentPosition","navigator","geolocation","userLat","coords","latitude","userLng","longitude","console","log","fetchGyms","error","enableHighAccuracy","timeout","maximumAge","script","document","createElement","src","process","env","REACT_APP_NAVER_MAP_CLIENT_ID","async","onload","head","appendChild","response","get","params","data","items","length","forEach","gym","mapy","mapx","children","id","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","index","_c","$RefreshReg$"],"sources":["C:/NRKIM_WORKSPACE/THE_GYM/frontend/app/src/components/MapComponent.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst MapComponent = () => {\r\n    const [map, setMap] = useState(null);\r\n    const [gyms, setGyms] = useState([]); // ✅ 헬스장 목록 상태 추가\r\n    const [userLocation, setUserLocation] = useState(null); // ✅ 현재 위치 상태 추가\r\n\r\n    useEffect(() => {\r\n        const initMap = (lat, lng) => {\r\n            const { naver } = window;\r\n            if (!naver) return;\r\n\r\n            const mapInstance = new naver.maps.Map('map', {\r\n                center: new naver.maps.LatLng(lat, lng),\r\n                zoom: 15,\r\n            });\r\n\r\n            // ✅ 내 위치 마커 추가\r\n            new naver.maps.Marker({\r\n                position: new naver.maps.LatLng(lat, lng),\r\n                map: mapInstance,\r\n                title: \"내 위치\",\r\n                icon: {\r\n                    content: '<div style=\"color:red; font-weight:bold;\">📍</div>',\r\n                    size: new naver.maps.Size(20, 20),\r\n                    anchor: new naver.maps.Point(10, 10),\r\n                }\r\n            });\r\n\r\n            setMap(mapInstance);\r\n        };\r\n\r\n        const getCurrentPosition = () => {\r\n            if (navigator.geolocation) {\r\n                navigator.geolocation.getCurrentPosition(\r\n                    (position) => {\r\n                        const userLat = position.coords.latitude;\r\n                        const userLng = position.coords.longitude;\r\n                        console.log(\"📍 현재 위치:\", userLat, userLng); // ✅ 디버깅용 로그\r\n\r\n                        setUserLocation({ lat: userLat, lng: userLng });\r\n                        initMap(userLat, userLng);\r\n                        fetchGyms(userLat, userLng); // ✅ 위치 정보 가져온 후 헬스장 검색\r\n                    },\r\n                    (error) => {\r\n                        console.error(\"❌ Geolocation Error:\", error);\r\n                        initMap(37.5665, 126.9780);\r\n                    }, {\r\n                        enableHighAccuracy: true,\r\n                        timeout: 10000,\r\n                        maximumAge: 0\r\n                    }\r\n                );\r\n            } else {\r\n                console.error(\"Geolocation is not supported by this browser.\");\r\n                initMap(37.5665, 126.9780);\r\n            }\r\n        };\r\n\r\n        // ✅ 네이버 지도 스크립트 로드\r\n        const script = document.createElement('script');\r\n        script.src = `https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=${process.env.REACT_APP_NAVER_MAP_CLIENT_ID}`;\r\n        script.async = true;\r\n        script.onload = getCurrentPosition;\r\n        document.head.appendChild(script);\r\n    }, []);\r\n\r\n    // ✅ 헬스장 목록 가져오기\r\n    const fetchGyms = async (lat, lng) => {\r\n        try {\r\n            console.log(\"🔍 헬스장 검색 요청:\", lat, lng); // ✅ 요청 전 위치 확인\r\n            const response = await axios.get(\"http://localhost:8080/api/v1/places\", {\r\n                params: { lat, lng }\r\n            });\r\n\r\n            console.log(\"✅ 헬스장 검색 결과:\", response.data.items);\r\n            setGyms(response.data.items);\r\n        } catch (error) {\r\n            console.error(\"API 호출 오류:\", error);\r\n        }\r\n    };\r\n\r\n    // ✅ 지도 위에 마커 추가\r\n    useEffect(() => {\r\n        if (!map || gyms.length === 0) return;\r\n\r\n        gyms.forEach((gym) => {\r\n            new naver.maps.Marker({\r\n                position: new naver.maps.LatLng(gym.mapy, gym.mapx), // 네이버 API는 위도/경도 순서가 반대\r\n                map: map,\r\n                title: gym.title,\r\n                icon: {\r\n                    content: `<div style=\"color:blue; font-weight:bold;\">🏋️‍♂️</div>`,\r\n                    size: new naver.maps.Size(20, 20),\r\n                    anchor: new naver.maps.Point(10, 10),\r\n                }\r\n            });\r\n        });\r\n    }, [map, gyms]); // ✅ `gyms` 변경될 때 마커 추가\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"map\" style={{ width: '100%', height: '500px' }} />\r\n            <h2>근처 헬스장 목록</h2>\r\n            <ul>\r\n                {gyms.map((gym, index) => (\r\n                    <li key={index}>{gym.title}</li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MapComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}